// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repos

import (
	"context"
	"database/sql"
	"time"
)

const addUser = `-- name: AddUser :execresult
INSERT INTO users (
    firstname,
    lastname,
    phone,
    email,
    password,
    role
) VALUES (?, ?, ?, ?, ?, ?)
`

type AddUserParams struct {
	Firstname string    `json:"firstname"`
	Lastname  string    `json:"lastname"`
	Phone     string    `json:"phone"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	Role      UsersRole `json:"role"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (sql.Result, error) {
	return q.exec(ctx, q.addUserStmt, addUser,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.Role,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
}

const findUsers = `-- name: FindUsers :many
SELECT users.user_id, users.firstname, users.lastname, users.phone, users.email, users.password, users.profile_pic_id, users.role, users.created_at, users.updated_at, images.url AS profile_pic
FROM users LEFT JOIN images ON users.profile_pic_id = images.image_id
WHERE lower(concat(firstname, ' ', lastname, ' ', phone, ' ', email)) LIKE lower(?)
`

type FindUsersRow struct {
	UserID       int32          `json:"user_id"`
	Firstname    string         `json:"firstname"`
	Lastname     string         `json:"lastname"`
	Phone        string         `json:"phone"`
	Email        string         `json:"email"`
	Password     string         `json:"password"`
	ProfilePicID sql.NullInt32  `json:"profile_pic_id"`
	Role         UsersRole      `json:"role"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	ProfilePic   sql.NullString `json:"profile_pic"`
}

func (q *Queries) FindUsers(ctx context.Context, text string) ([]FindUsersRow, error) {
	rows, err := q.query(ctx, q.findUsersStmt, findUsers, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersRow
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.Email,
			&i.Password,
			&i.ProfilePicID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProfilePic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many

SELECT users.user_id, users.firstname, users.lastname, users.phone, users.email, users.password, users.profile_pic_id, users.role, users.created_at, users.updated_at, images.url AS profile_pic
FROM users LEFT JOIN images ON users.profile_pic_id = images.image_id
ORDER BY lastname
`

type GetAllUsersRow struct {
	UserID       int32          `json:"user_id"`
	Firstname    string         `json:"firstname"`
	Lastname     string         `json:"lastname"`
	Phone        string         `json:"phone"`
	Email        string         `json:"email"`
	Password     string         `json:"password"`
	ProfilePicID sql.NullInt32  `json:"profile_pic_id"`
	Role         UsersRole      `json:"role"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	ProfilePic   sql.NullString `json:"profile_pic"`
}

// WHERE MATCH(firstname, lastname, phone, email)) AGAINST (sqlc.arg(text));
func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Firstname,
			&i.Lastname,
			&i.Phone,
			&i.Email,
			&i.Password,
			&i.ProfilePicID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProfilePic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmailOrPhone = `-- name: GetUserByEmailOrPhone :one
SELECT users.user_id, users.firstname, users.lastname, users.phone, users.email, users.password, users.profile_pic_id, users.role, users.created_at, users.updated_at, images.url AS profile_pic
FROM users LEFT JOIN images ON users.profile_pic_id = images.image_id
WHERE email = ? OR phone = ?
`

type GetUserByEmailOrPhoneParams struct {
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type GetUserByEmailOrPhoneRow struct {
	UserID       int32          `json:"user_id"`
	Firstname    string         `json:"firstname"`
	Lastname     string         `json:"lastname"`
	Phone        string         `json:"phone"`
	Email        string         `json:"email"`
	Password     string         `json:"password"`
	ProfilePicID sql.NullInt32  `json:"profile_pic_id"`
	Role         UsersRole      `json:"role"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	ProfilePic   sql.NullString `json:"profile_pic"`
}

func (q *Queries) GetUserByEmailOrPhone(ctx context.Context, arg GetUserByEmailOrPhoneParams) (GetUserByEmailOrPhoneRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailOrPhoneStmt, getUserByEmailOrPhone, arg.Email, arg.Phone)
	var i GetUserByEmailOrPhoneRow
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.ProfilePicID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfilePic,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT users.user_id, users.firstname, users.lastname, users.phone, users.email, users.password, users.profile_pic_id, users.role, users.created_at, users.updated_at, images.url AS profile_pic
FROM users LEFT JOIN images ON users.profile_pic_id = images.image_id
WHERE user_id = ?
`

type GetUserByIDRow struct {
	UserID       int32          `json:"user_id"`
	Firstname    string         `json:"firstname"`
	Lastname     string         `json:"lastname"`
	Phone        string         `json:"phone"`
	Email        string         `json:"email"`
	Password     string         `json:"password"`
	ProfilePicID sql.NullInt32  `json:"profile_pic_id"`
	Role         UsersRole      `json:"role"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
	ProfilePic   sql.NullString `json:"profile_pic"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (GetUserByIDRow, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Phone,
		&i.Email,
		&i.Password,
		&i.ProfilePicID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfilePic,
	)
	return i, err
}

const getUserProfilePicID = `-- name: GetUserProfilePicID :one
SELECT profile_pic_id
FROM users
WHERE user_id = ?
`

func (q *Queries) GetUserProfilePicID(ctx context.Context, userID int32) (sql.NullInt32, error) {
	row := q.queryRow(ctx, q.getUserProfilePicIDStmt, getUserProfilePicID, userID)
	var profile_pic_id sql.NullInt32
	err := row.Scan(&profile_pic_id)
	return profile_pic_id, err
}

const updateUserInfo = `-- name: UpdateUserInfo :execresult
UPDATE users
SET
    firstname = ?,
    lastname = ?,
    phone = ?,
    email = ?
WHERE user_id = ?
`

type UpdateUserInfoParams struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Phone     string `json:"phone"`
	Email     string `json:"email"`
	UserID    int32  `json:"user_id"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserInfoStmt, updateUserInfo,
		arg.Firstname,
		arg.Lastname,
		arg.Phone,
		arg.Email,
		arg.UserID,
	)
}

const updateUserPassword = `-- name: UpdateUserPassword :execresult
UPDATE users
SET password = ?
WHERE user_id = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.Password, arg.UserID)
}

const updateUserProfilePic = `-- name: UpdateUserProfilePic :execresult
UPDATE users
SET profile_pic_id = ?
WHERE user_id = ?
`

type UpdateUserProfilePicParams struct {
	ProfilePicID sql.NullInt32 `json:"profile_pic_id"`
	UserID       int32         `json:"user_id"`
}

func (q *Queries) UpdateUserProfilePic(ctx context.Context, arg UpdateUserProfilePicParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserProfilePicStmt, updateUserProfilePic, arg.ProfilePicID, arg.UserID)
}

const updateUserRole = `-- name: UpdateUserRole :execresult
UPDATE users
SET role = ?
WHERE user_id = ?
`

type UpdateUserRoleParams struct {
	Role   UsersRole `json:"role"`
	UserID int32     `json:"user_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserRoleStmt, updateUserRole, arg.Role, arg.UserID)
}

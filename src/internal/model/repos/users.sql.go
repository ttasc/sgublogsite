// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repos

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    firstname,
    lastname,
    mobile,
    email,
    password,
    profile_pic_id,
    role
) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Firstname    string        `json:"firstname"`
	Lastname     string        `json:"lastname"`
	Mobile       string        `json:"mobile"`
	Email        string        `json:"email"`
	Password     string        `json:"password"`
	ProfilePicID sql.NullInt32 `json:"profile_pic_id"`
	Role         NullUsersRole `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Mobile,
		arg.Email,
		arg.Password,
		arg.ProfilePicID,
		arg.Role,
	)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteUserStmt, deleteUser, userID)
}

const findUsers = `-- name: FindUsers :many
SELECT user_id, firstname, lastname, mobile, email, password, profile_pic_id, role, created_at, updated_at
FROM users
WHERE lower(concat(firstname, ' ', lastname, ' ', mobile, ' ', email)) LIKE lower(?)
`

func (q *Queries) FindUsers(ctx context.Context, text string) ([]User, error) {
	rows, err := q.query(ctx, q.findUsersStmt, findUsers, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Firstname,
			&i.Lastname,
			&i.Mobile,
			&i.Email,
			&i.Password,
			&i.ProfilePicID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many

SELECT user_id, firstname, lastname, mobile, email, password, profile_pic_id, role, created_at, updated_at
FROM users
ORDER BY lastname
`

// WHERE MATCH(firstname, lastname, mobile, email)) AGAINST (sqlc.arg(text));
func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Firstname,
			&i.Lastname,
			&i.Mobile,
			&i.Email,
			&i.Password,
			&i.ProfilePicID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, firstname, lastname, mobile, email, password, profile_pic_id, role, created_at, updated_at
FROM users
WHERE user_id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Mobile,
		&i.Email,
		&i.Password,
		&i.ProfilePicID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserInfo = `-- name: UpdateUserInfo :execresult
UPDATE users
SET
    firstname = ?,
    lastname = ?,
    mobile = ?,
    email = ?,
    profile_pic_id = ?
WHERE user_id = ?
`

type UpdateUserInfoParams struct {
	Firstname    string        `json:"firstname"`
	Lastname     string        `json:"lastname"`
	Mobile       string        `json:"mobile"`
	Email        string        `json:"email"`
	ProfilePicID sql.NullInt32 `json:"profile_pic_id"`
	UserID       int32         `json:"user_id"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserInfoStmt, updateUserInfo,
		arg.Firstname,
		arg.Lastname,
		arg.Mobile,
		arg.Email,
		arg.ProfilePicID,
		arg.UserID,
	)
}

const updateUserPassword = `-- name: UpdateUserPassword :execresult
UPDATE users
SET password = ?
WHERE user_id = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.Password, arg.UserID)
}

const updateUserRole = `-- name: UpdateUserRole :execresult
UPDATE users
SET role = ?
WHERE user_id = ?
`

type UpdateUserRoleParams struct {
	Role   NullUsersRole `json:"role"`
	UserID int32         `json:"user_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserRoleStmt, updateUserRole, arg.Role, arg.UserID)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tags.sql

package repos

import (
	"context"
	"database/sql"
)

const addTag = `-- name: AddTag :execresult
INSERT INTO tags (
    name,
    slug
) VALUES (?, ?)
`

type AddTagParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) AddTag(ctx context.Context, arg AddTagParams) (sql.Result, error) {
	return q.exec(ctx, q.addTagStmt, addTag, arg.Name, arg.Slug)
}

const deleteTag = `-- name: DeleteTag :execresult
DELETE FROM tags
WHERE tag_id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, tagID int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteTagStmt, deleteTag, tagID)
}

const getAllTagNames = `-- name: GetAllTagNames :many
SELECT name FROM tags
`

func (q *Queries) GetAllTagNames(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.getAllTagNamesStmt, getAllTagNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTags = `-- name: GetAllTags :many
SELECT tag_id, name, slug FROM tags
`

func (q *Queries) GetAllTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.query(ctx, q.getAllTagsStmt, getAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagByID = `-- name: GetTagByID :one
SELECT tag_id, name, slug
FROM tags
WHERE tag_id = ?
`

func (q *Queries) GetTagByID(ctx context.Context, tagID int32) (Tag, error) {
	row := q.queryRow(ctx, q.getTagByIDStmt, getTagByID, tagID)
	var i Tag
	err := row.Scan(&i.TagID, &i.Name, &i.Slug)
	return i, err
}

const getTagsByPostID = `-- name: GetTagsByPostID :many
SELECT tags.tag_id, tags.name, tags.slug FROM tags
WHERE tag_id IN (
    SELECT tag_id
    FROM post_tags
    WHERE post_id = ?
)
`

func (q *Queries) GetTagsByPostID(ctx context.Context, postID int32) ([]Tag, error) {
	rows, err := q.query(ctx, q.getTagsByPostIDStmt, getTagsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

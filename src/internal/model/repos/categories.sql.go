// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package repos

import (
	"context"
	"database/sql"
)

const addCategory = `-- name: AddCategory :execresult
INSERT INTO categories (
    parent_category_id,
    name,
    slug
) VALUES (?, ?, ?)
`

type AddCategoryParams struct {
	ParentCategoryID sql.NullInt32 `json:"parent_category_id"`
	Name             string        `json:"name"`
	Slug             string        `json:"slug"`
}

func (q *Queries) AddCategory(ctx context.Context, arg AddCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.addCategoryStmt, addCategory, arg.ParentCategoryID, arg.Name, arg.Slug)
}

const deleteCategory = `-- name: DeleteCategory :execresult
DELETE FROM categories
WHERE category_id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteCategoryStmt, deleteCategory, categoryID)
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT category_id, parent_category_id, name, slug FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.query(ctx, q.getAllCategoriesStmt, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.ParentCategoryID,
			&i.Name,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT category_id, parent_category_id, name, slug
FROM categories
WHERE category_id = ?
`

func (q *Queries) GetCategoryByID(ctx context.Context, categoryID int32) (Category, error) {
	row := q.queryRow(ctx, q.getCategoryByIDStmt, getCategoryByID, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.ParentCategoryID,
		&i.Name,
		&i.Slug,
	)
	return i, err
}

const getChildCategories = `-- name: GetChildCategories :many
SELECT category_id, parent_category_id, name, slug
FROM categories
WHERE parent_category_id = ?
`

func (q *Queries) GetChildCategories(ctx context.Context, parentCategoryID sql.NullInt32) ([]Category, error) {
	rows, err := q.query(ctx, q.getChildCategoriesStmt, getChildCategories, parentCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.ParentCategoryID,
			&i.Name,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParentCategoryID = `-- name: GetParentCategoryID :one
SELECT parent_category_id
FROM categories
WHERE category_id = ?
`

func (q *Queries) GetParentCategoryID(ctx context.Context, categoryID int32) (sql.NullInt32, error) {
	row := q.queryRow(ctx, q.getParentCategoryIDStmt, getParentCategoryID, categoryID)
	var parent_category_id sql.NullInt32
	err := row.Scan(&parent_category_id)
	return parent_category_id, err
}

const updateCategory = `-- name: UpdateCategory :execresult
UPDATE categories
SET name = ?,
    slug = ?
WHERE category_id = ?
`

type UpdateCategoryParams struct {
	Name       string `json:"name"`
	Slug       string `json:"slug"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.updateCategoryStmt, updateCategory, arg.Name, arg.Slug, arg.CategoryID)
}

const updateCategoryParent = `-- name: UpdateCategoryParent :execresult
UPDATE categories
SET parent_category_id = ?
WHERE category_id = ?
`

type UpdateCategoryParentParams struct {
	ParentCategoryID sql.NullInt32 `json:"parent_category_id"`
	CategoryID       int32         `json:"category_id"`
}

func (q *Queries) UpdateCategoryParent(ctx context.Context, arg UpdateCategoryParentParams) (sql.Result, error) {
	return q.exec(ctx, q.updateCategoryParentStmt, updateCategoryParent, arg.ParentCategoryID, arg.CategoryID)
}

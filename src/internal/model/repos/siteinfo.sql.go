// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: siteinfo.sql

package repos

import (
	"context"
	"database/sql"
)

const createSiteInfo = `-- name: CreateSiteInfo :execresult
INSERT INTO siteinfo (
    site_title,
    site_logo_id,
    site_name,
    site_about,
    site_copyright,
    contact_address,
    contact_email,
    contact_phone
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateSiteInfoParams struct {
	SiteTitle      sql.NullString
	SiteLogoID     sql.NullInt32
	SiteName       sql.NullString
	SiteAbout      sql.NullString
	SiteCopyright  sql.NullString
	ContactAddress sql.NullString
	ContactEmail   sql.NullString
	ContactPhone   sql.NullString
}

func (q *Queries) CreateSiteInfo(ctx context.Context, arg CreateSiteInfoParams) (sql.Result, error) {
	return q.exec(ctx, q.createSiteInfoStmt, createSiteInfo,
		arg.SiteTitle,
		arg.SiteLogoID,
		arg.SiteName,
		arg.SiteAbout,
		arg.SiteCopyright,
		arg.ContactAddress,
		arg.ContactEmail,
		arg.ContactPhone,
	)
}

const getContactInfo = `-- name: GetContactInfo :one
SELECT contact_address, contact_email, contact_phone FROM siteinfo
`

type GetContactInfoRow struct {
	ContactAddress sql.NullString
	ContactEmail   sql.NullString
	ContactPhone   sql.NullString
}

func (q *Queries) GetContactInfo(ctx context.Context) (GetContactInfoRow, error) {
	row := q.queryRow(ctx, q.getContactInfoStmt, getContactInfo)
	var i GetContactInfoRow
	err := row.Scan(&i.ContactAddress, &i.ContactEmail, &i.ContactPhone)
	return i, err
}

const getSiteAbout = `-- name: GetSiteAbout :one
SELECT site_about FROM siteinfo
`

func (q *Queries) GetSiteAbout(ctx context.Context) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getSiteAboutStmt, getSiteAbout)
	var site_about sql.NullString
	err := row.Scan(&site_about)
	return site_about, err
}

const getSiteInfo = `-- name: GetSiteInfo :one
SELECT site_id, site_title, site_name, site_logo_id, site_about, site_copyright, contact_address, contact_email, contact_phone FROM siteinfo
`

func (q *Queries) GetSiteInfo(ctx context.Context) (Siteinfo, error) {
	row := q.queryRow(ctx, q.getSiteInfoStmt, getSiteInfo)
	var i Siteinfo
	err := row.Scan(
		&i.SiteID,
		&i.SiteTitle,
		&i.SiteName,
		&i.SiteLogoID,
		&i.SiteAbout,
		&i.SiteCopyright,
		&i.ContactAddress,
		&i.ContactEmail,
		&i.ContactPhone,
	)
	return i, err
}

const getSiteMeta = `-- name: GetSiteMeta :one
SELECT
    site_title,
    site_name,
    images.url,
    site_copyright
FROM siteinfo JOIN images
ON siteinfo.site_logo_id = images.image_id
`

type GetSiteMetaRow struct {
	SiteTitle     sql.NullString
	SiteName      sql.NullString
	Url           string
	SiteCopyright sql.NullString
}

func (q *Queries) GetSiteMeta(ctx context.Context) (GetSiteMetaRow, error) {
	row := q.queryRow(ctx, q.getSiteMetaStmt, getSiteMeta)
	var i GetSiteMetaRow
	err := row.Scan(
		&i.SiteTitle,
		&i.SiteName,
		&i.Url,
		&i.SiteCopyright,
	)
	return i, err
}

const updateSiteInfo = `-- name: UpdateSiteInfo :execresult
UPDATE siteinfo SET
    site_title = ?,
    site_logo_id = ?,
    site_name = ?,
    site_about = ?,
    site_copyright = ?,
    contact_address = ?,
    contact_email = ?,
    contact_phone = ?
WHERE site_id = 1
`

type UpdateSiteInfoParams struct {
	SiteTitle      sql.NullString
	SiteLogoID     sql.NullInt32
	SiteName       sql.NullString
	SiteAbout      sql.NullString
	SiteCopyright  sql.NullString
	ContactAddress sql.NullString
	ContactEmail   sql.NullString
	ContactPhone   sql.NullString
}

func (q *Queries) UpdateSiteInfo(ctx context.Context, arg UpdateSiteInfoParams) (sql.Result, error) {
	return q.exec(ctx, q.updateSiteInfoStmt, updateSiteInfo,
		arg.SiteTitle,
		arg.SiteLogoID,
		arg.SiteName,
		arg.SiteAbout,
		arg.SiteCopyright,
		arg.ContactAddress,
		arg.ContactEmail,
		arg.ContactPhone,
	)
}

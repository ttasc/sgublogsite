// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repos

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type PostsStatus string

const (
	PostsStatusDraft     PostsStatus = "draft"
	PostsStatusPublished PostsStatus = "published"
)

func (e *PostsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostsStatus(s)
	case string:
		*e = PostsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PostsStatus: %T", src)
	}
	return nil
}

type NullPostsStatus struct {
	PostsStatus PostsStatus `json:"posts_status"`
	Valid       bool        `json:"valid"` // Valid is true if PostsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PostsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostsStatus), nil
}

type UsersRole string

const (
	UsersRoleAdmin      UsersRole = "admin"
	UsersRoleAuthor     UsersRole = "author"
	UsersRoleSubscriber UsersRole = "subscriber"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole `json:"users_role"`
	Valid     bool      `json:"valid"` // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type Category struct {
	CategoryID       int32         `json:"category_id"`
	ParentCategoryID sql.NullInt32 `json:"parent_category_id"`
	Name             string        `json:"name"`
	Slug             string        `json:"slug"`
}

type Image struct {
	ImageID int32          `json:"image_id"`
	Url     string         `json:"url"`
	Name    sql.NullString `json:"name"`
}

type Post struct {
	PostID      int32         `json:"post_id"`
	UserID      sql.NullInt32 `json:"user_id"`
	Title       string        `json:"title"`
	Slug        string        `json:"slug"`
	ThumbnailID sql.NullInt32 `json:"thumbnail_id"`
	Body        string        `json:"body"`
	Status      PostsStatus   `json:"status"`
	Private     bool          `json:"private"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
}

type PostCategory struct {
	PostID     int32 `json:"post_id"`
	CategoryID int32 `json:"category_id"`
}

type PostTag struct {
	PostID int32 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

type Tag struct {
	TagID int32  `json:"tag_id"`
	Name  string `json:"name"`
	Slug  string `json:"slug"`
}

type User struct {
	UserID       int32         `json:"user_id"`
	Firstname    string        `json:"firstname"`
	Lastname     string        `json:"lastname"`
	Mobile       string        `json:"mobile"`
	Email        string        `json:"email"`
	Password     string        `json:"password"`
	ProfilePicID sql.NullInt32 `json:"profile_pic_id"`
	Role         NullUsersRole `json:"role"`
	CreatedAt    time.Time     `json:"created_at"`
	UpdatedAt    time.Time     `json:"updated_at"`
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repos

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addCategoryStmt, err = db.PrepareContext(ctx, addCategory); err != nil {
		return nil, fmt.Errorf("error preparing query AddCategory: %w", err)
	}
	if q.addImageStmt, err = db.PrepareContext(ctx, addImage); err != nil {
		return nil, fmt.Errorf("error preparing query AddImage: %w", err)
	}
	if q.addPostToCategoryStmt, err = db.PrepareContext(ctx, addPostToCategory); err != nil {
		return nil, fmt.Errorf("error preparing query AddPostToCategory: %w", err)
	}
	if q.addTagStmt, err = db.PrepareContext(ctx, addTag); err != nil {
		return nil, fmt.Errorf("error preparing query AddTag: %w", err)
	}
	if q.addTagToPostStmt, err = db.PrepareContext(ctx, addTagToPost); err != nil {
		return nil, fmt.Errorf("error preparing query AddTagToPost: %w", err)
	}
	if q.addUserStmt, err = db.PrepareContext(ctx, addUser); err != nil {
		return nil, fmt.Errorf("error preparing query AddUser: %w", err)
	}
	if q.countImagesStmt, err = db.PrepareContext(ctx, countImages); err != nil {
		return nil, fmt.Errorf("error preparing query CountImages: %w", err)
	}
	if q.countPostsStmt, err = db.PrepareContext(ctx, countPosts); err != nil {
		return nil, fmt.Errorf("error preparing query CountPosts: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createSiteInfoStmt, err = db.PrepareContext(ctx, createSiteInfo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSiteInfo: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, deleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.deleteImageStmt, err = db.PrepareContext(ctx, deleteImage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteImage: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.deleteTagStmt, err = db.PrepareContext(ctx, deleteTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTag: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.findPostsStmt, err = db.PrepareContext(ctx, findPosts); err != nil {
		return nil, fmt.Errorf("error preparing query FindPosts: %w", err)
	}
	if q.findUsersStmt, err = db.PrepareContext(ctx, findUsers); err != nil {
		return nil, fmt.Errorf("error preparing query FindUsers: %w", err)
	}
	if q.getAllCategoriesStmt, err = db.PrepareContext(ctx, getAllCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCategories: %w", err)
	}
	if q.getAllImagesStmt, err = db.PrepareContext(ctx, getAllImages); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllImages: %w", err)
	}
	if q.getAllTagNamesStmt, err = db.PrepareContext(ctx, getAllTagNames); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllTagNames: %w", err)
	}
	if q.getAllTagsStmt, err = db.PrepareContext(ctx, getAllTags); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllTags: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getCategoryByIDStmt, err = db.PrepareContext(ctx, getCategoryByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryByID: %w", err)
	}
	if q.getChildCategoriesStmt, err = db.PrepareContext(ctx, getChildCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildCategories: %w", err)
	}
	if q.getContactInfoStmt, err = db.PrepareContext(ctx, getContactInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetContactInfo: %w", err)
	}
	if q.getFilteredPostsStmt, err = db.PrepareContext(ctx, getFilteredPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetFilteredPosts: %w", err)
	}
	if q.getImageByIDStmt, err = db.PrepareContext(ctx, getImageByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetImageByID: %w", err)
	}
	if q.getImageByURLStmt, err = db.PrepareContext(ctx, getImageByURL); err != nil {
		return nil, fmt.Errorf("error preparing query GetImageByURL: %w", err)
	}
	if q.getParentCategoryIDStmt, err = db.PrepareContext(ctx, getParentCategoryID); err != nil {
		return nil, fmt.Errorf("error preparing query GetParentCategoryID: %w", err)
	}
	if q.getPostByIDStmt, err = db.PrepareContext(ctx, getPostByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostByID: %w", err)
	}
	if q.getPostsStmt, err = db.PrepareContext(ctx, getPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetPosts: %w", err)
	}
	if q.getPostsByCategoryIDStmt, err = db.PrepareContext(ctx, getPostsByCategoryID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByCategoryID: %w", err)
	}
	if q.getPostsByCategorySlugStmt, err = db.PrepareContext(ctx, getPostsByCategorySlug); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByCategorySlug: %w", err)
	}
	if q.getPostsByStatusStmt, err = db.PrepareContext(ctx, getPostsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByStatus: %w", err)
	}
	if q.getPostsByTagIDStmt, err = db.PrepareContext(ctx, getPostsByTagID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByTagID: %w", err)
	}
	if q.getPostsByTagSlugStmt, err = db.PrepareContext(ctx, getPostsByTagSlug); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByTagSlug: %w", err)
	}
	if q.getPostsByUserIDStmt, err = db.PrepareContext(ctx, getPostsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByUserID: %w", err)
	}
	if q.getSiteAboutStmt, err = db.PrepareContext(ctx, getSiteAbout); err != nil {
		return nil, fmt.Errorf("error preparing query GetSiteAbout: %w", err)
	}
	if q.getSiteInfoStmt, err = db.PrepareContext(ctx, getSiteInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetSiteInfo: %w", err)
	}
	if q.getSiteMetaStmt, err = db.PrepareContext(ctx, getSiteMeta); err != nil {
		return nil, fmt.Errorf("error preparing query GetSiteMeta: %w", err)
	}
	if q.getTagByIDStmt, err = db.PrepareContext(ctx, getTagByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagByID: %w", err)
	}
	if q.getTagsByPostIDStmt, err = db.PrepareContext(ctx, getTagsByPostID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsByPostID: %w", err)
	}
	if q.getUncategorizedPostsStmt, err = db.PrepareContext(ctx, getUncategorizedPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetUncategorizedPosts: %w", err)
	}
	if q.getUserAvatarIDStmt, err = db.PrepareContext(ctx, getUserAvatarID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAvatarID: %w", err)
	}
	if q.getUserByEmailOrPhoneStmt, err = db.PrepareContext(ctx, getUserByEmailOrPhone); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmailOrPhone: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.updateCategoryStmt, err = db.PrepareContext(ctx, updateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategory: %w", err)
	}
	if q.updateCategoryParentStmt, err = db.PrepareContext(ctx, updateCategoryParent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategoryParent: %w", err)
	}
	if q.updateImageURLStmt, err = db.PrepareContext(ctx, updateImageURL); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateImageURL: %w", err)
	}
	if q.updatePostBodyStmt, err = db.PrepareContext(ctx, updatePostBody); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePostBody: %w", err)
	}
	if q.updatePostMetadataStmt, err = db.PrepareContext(ctx, updatePostMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePostMetadata: %w", err)
	}
	if q.updatePostPrivateStmt, err = db.PrepareContext(ctx, updatePostPrivate); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePostPrivate: %w", err)
	}
	if q.updatePostStatusStmt, err = db.PrepareContext(ctx, updatePostStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePostStatus: %w", err)
	}
	if q.updateSiteInfoStmt, err = db.PrepareContext(ctx, updateSiteInfo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSiteInfo: %w", err)
	}
	if q.updateTagStmt, err = db.PrepareContext(ctx, updateTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTag: %w", err)
	}
	if q.updateUserAvatarStmt, err = db.PrepareContext(ctx, updateUserAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserAvatar: %w", err)
	}
	if q.updateUserInfoStmt, err = db.PrepareContext(ctx, updateUserInfo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserInfo: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserRoleStmt, err = db.PrepareContext(ctx, updateUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRole: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addCategoryStmt != nil {
		if cerr := q.addCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addCategoryStmt: %w", cerr)
		}
	}
	if q.addImageStmt != nil {
		if cerr := q.addImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addImageStmt: %w", cerr)
		}
	}
	if q.addPostToCategoryStmt != nil {
		if cerr := q.addPostToCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPostToCategoryStmt: %w", cerr)
		}
	}
	if q.addTagStmt != nil {
		if cerr := q.addTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTagStmt: %w", cerr)
		}
	}
	if q.addTagToPostStmt != nil {
		if cerr := q.addTagToPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTagToPostStmt: %w", cerr)
		}
	}
	if q.addUserStmt != nil {
		if cerr := q.addUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserStmt: %w", cerr)
		}
	}
	if q.countImagesStmt != nil {
		if cerr := q.countImagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countImagesStmt: %w", cerr)
		}
	}
	if q.countPostsStmt != nil {
		if cerr := q.countPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countPostsStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createSiteInfoStmt != nil {
		if cerr := q.createSiteInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSiteInfoStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.deleteImageStmt != nil {
		if cerr := q.deleteImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteImageStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.deleteTagStmt != nil {
		if cerr := q.deleteTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.findPostsStmt != nil {
		if cerr := q.findPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPostsStmt: %w", cerr)
		}
	}
	if q.findUsersStmt != nil {
		if cerr := q.findUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUsersStmt: %w", cerr)
		}
	}
	if q.getAllCategoriesStmt != nil {
		if cerr := q.getAllCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCategoriesStmt: %w", cerr)
		}
	}
	if q.getAllImagesStmt != nil {
		if cerr := q.getAllImagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllImagesStmt: %w", cerr)
		}
	}
	if q.getAllTagNamesStmt != nil {
		if cerr := q.getAllTagNamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllTagNamesStmt: %w", cerr)
		}
	}
	if q.getAllTagsStmt != nil {
		if cerr := q.getAllTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllTagsStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getCategoryByIDStmt != nil {
		if cerr := q.getCategoryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryByIDStmt: %w", cerr)
		}
	}
	if q.getChildCategoriesStmt != nil {
		if cerr := q.getChildCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildCategoriesStmt: %w", cerr)
		}
	}
	if q.getContactInfoStmt != nil {
		if cerr := q.getContactInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getContactInfoStmt: %w", cerr)
		}
	}
	if q.getFilteredPostsStmt != nil {
		if cerr := q.getFilteredPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFilteredPostsStmt: %w", cerr)
		}
	}
	if q.getImageByIDStmt != nil {
		if cerr := q.getImageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageByIDStmt: %w", cerr)
		}
	}
	if q.getImageByURLStmt != nil {
		if cerr := q.getImageByURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageByURLStmt: %w", cerr)
		}
	}
	if q.getParentCategoryIDStmt != nil {
		if cerr := q.getParentCategoryIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParentCategoryIDStmt: %w", cerr)
		}
	}
	if q.getPostByIDStmt != nil {
		if cerr := q.getPostByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostByIDStmt: %w", cerr)
		}
	}
	if q.getPostsStmt != nil {
		if cerr := q.getPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsStmt: %w", cerr)
		}
	}
	if q.getPostsByCategoryIDStmt != nil {
		if cerr := q.getPostsByCategoryIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByCategoryIDStmt: %w", cerr)
		}
	}
	if q.getPostsByCategorySlugStmt != nil {
		if cerr := q.getPostsByCategorySlugStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByCategorySlugStmt: %w", cerr)
		}
	}
	if q.getPostsByStatusStmt != nil {
		if cerr := q.getPostsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByStatusStmt: %w", cerr)
		}
	}
	if q.getPostsByTagIDStmt != nil {
		if cerr := q.getPostsByTagIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByTagIDStmt: %w", cerr)
		}
	}
	if q.getPostsByTagSlugStmt != nil {
		if cerr := q.getPostsByTagSlugStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByTagSlugStmt: %w", cerr)
		}
	}
	if q.getPostsByUserIDStmt != nil {
		if cerr := q.getPostsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByUserIDStmt: %w", cerr)
		}
	}
	if q.getSiteAboutStmt != nil {
		if cerr := q.getSiteAboutStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSiteAboutStmt: %w", cerr)
		}
	}
	if q.getSiteInfoStmt != nil {
		if cerr := q.getSiteInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSiteInfoStmt: %w", cerr)
		}
	}
	if q.getSiteMetaStmt != nil {
		if cerr := q.getSiteMetaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSiteMetaStmt: %w", cerr)
		}
	}
	if q.getTagByIDStmt != nil {
		if cerr := q.getTagByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagByIDStmt: %w", cerr)
		}
	}
	if q.getTagsByPostIDStmt != nil {
		if cerr := q.getTagsByPostIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsByPostIDStmt: %w", cerr)
		}
	}
	if q.getUncategorizedPostsStmt != nil {
		if cerr := q.getUncategorizedPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUncategorizedPostsStmt: %w", cerr)
		}
	}
	if q.getUserAvatarIDStmt != nil {
		if cerr := q.getUserAvatarIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAvatarIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailOrPhoneStmt != nil {
		if cerr := q.getUserByEmailOrPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailOrPhoneStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.updateCategoryStmt != nil {
		if cerr := q.updateCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryStmt: %w", cerr)
		}
	}
	if q.updateCategoryParentStmt != nil {
		if cerr := q.updateCategoryParentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryParentStmt: %w", cerr)
		}
	}
	if q.updateImageURLStmt != nil {
		if cerr := q.updateImageURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateImageURLStmt: %w", cerr)
		}
	}
	if q.updatePostBodyStmt != nil {
		if cerr := q.updatePostBodyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostBodyStmt: %w", cerr)
		}
	}
	if q.updatePostMetadataStmt != nil {
		if cerr := q.updatePostMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostMetadataStmt: %w", cerr)
		}
	}
	if q.updatePostPrivateStmt != nil {
		if cerr := q.updatePostPrivateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostPrivateStmt: %w", cerr)
		}
	}
	if q.updatePostStatusStmt != nil {
		if cerr := q.updatePostStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostStatusStmt: %w", cerr)
		}
	}
	if q.updateSiteInfoStmt != nil {
		if cerr := q.updateSiteInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSiteInfoStmt: %w", cerr)
		}
	}
	if q.updateTagStmt != nil {
		if cerr := q.updateTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTagStmt: %w", cerr)
		}
	}
	if q.updateUserAvatarStmt != nil {
		if cerr := q.updateUserAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserAvatarStmt: %w", cerr)
		}
	}
	if q.updateUserInfoStmt != nil {
		if cerr := q.updateUserInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserInfoStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserRoleStmt != nil {
		if cerr := q.updateUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	addCategoryStmt            *sql.Stmt
	addImageStmt               *sql.Stmt
	addPostToCategoryStmt      *sql.Stmt
	addTagStmt                 *sql.Stmt
	addTagToPostStmt           *sql.Stmt
	addUserStmt                *sql.Stmt
	countImagesStmt            *sql.Stmt
	countPostsStmt             *sql.Stmt
	createPostStmt             *sql.Stmt
	createSiteInfoStmt         *sql.Stmt
	deleteCategoryStmt         *sql.Stmt
	deleteImageStmt            *sql.Stmt
	deletePostStmt             *sql.Stmt
	deleteTagStmt              *sql.Stmt
	deleteUserStmt             *sql.Stmt
	findPostsStmt              *sql.Stmt
	findUsersStmt              *sql.Stmt
	getAllCategoriesStmt       *sql.Stmt
	getAllImagesStmt           *sql.Stmt
	getAllTagNamesStmt         *sql.Stmt
	getAllTagsStmt             *sql.Stmt
	getAllUsersStmt            *sql.Stmt
	getCategoryByIDStmt        *sql.Stmt
	getChildCategoriesStmt     *sql.Stmt
	getContactInfoStmt         *sql.Stmt
	getFilteredPostsStmt       *sql.Stmt
	getImageByIDStmt           *sql.Stmt
	getImageByURLStmt          *sql.Stmt
	getParentCategoryIDStmt    *sql.Stmt
	getPostByIDStmt            *sql.Stmt
	getPostsStmt               *sql.Stmt
	getPostsByCategoryIDStmt   *sql.Stmt
	getPostsByCategorySlugStmt *sql.Stmt
	getPostsByStatusStmt       *sql.Stmt
	getPostsByTagIDStmt        *sql.Stmt
	getPostsByTagSlugStmt      *sql.Stmt
	getPostsByUserIDStmt       *sql.Stmt
	getSiteAboutStmt           *sql.Stmt
	getSiteInfoStmt            *sql.Stmt
	getSiteMetaStmt            *sql.Stmt
	getTagByIDStmt             *sql.Stmt
	getTagsByPostIDStmt        *sql.Stmt
	getUncategorizedPostsStmt  *sql.Stmt
	getUserAvatarIDStmt        *sql.Stmt
	getUserByEmailOrPhoneStmt  *sql.Stmt
	getUserByIDStmt            *sql.Stmt
	updateCategoryStmt         *sql.Stmt
	updateCategoryParentStmt   *sql.Stmt
	updateImageURLStmt         *sql.Stmt
	updatePostBodyStmt         *sql.Stmt
	updatePostMetadataStmt     *sql.Stmt
	updatePostPrivateStmt      *sql.Stmt
	updatePostStatusStmt       *sql.Stmt
	updateSiteInfoStmt         *sql.Stmt
	updateTagStmt              *sql.Stmt
	updateUserAvatarStmt       *sql.Stmt
	updateUserInfoStmt         *sql.Stmt
	updateUserPasswordStmt     *sql.Stmt
	updateUserRoleStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		addCategoryStmt:            q.addCategoryStmt,
		addImageStmt:               q.addImageStmt,
		addPostToCategoryStmt:      q.addPostToCategoryStmt,
		addTagStmt:                 q.addTagStmt,
		addTagToPostStmt:           q.addTagToPostStmt,
		addUserStmt:                q.addUserStmt,
		countImagesStmt:            q.countImagesStmt,
		countPostsStmt:             q.countPostsStmt,
		createPostStmt:             q.createPostStmt,
		createSiteInfoStmt:         q.createSiteInfoStmt,
		deleteCategoryStmt:         q.deleteCategoryStmt,
		deleteImageStmt:            q.deleteImageStmt,
		deletePostStmt:             q.deletePostStmt,
		deleteTagStmt:              q.deleteTagStmt,
		deleteUserStmt:             q.deleteUserStmt,
		findPostsStmt:              q.findPostsStmt,
		findUsersStmt:              q.findUsersStmt,
		getAllCategoriesStmt:       q.getAllCategoriesStmt,
		getAllImagesStmt:           q.getAllImagesStmt,
		getAllTagNamesStmt:         q.getAllTagNamesStmt,
		getAllTagsStmt:             q.getAllTagsStmt,
		getAllUsersStmt:            q.getAllUsersStmt,
		getCategoryByIDStmt:        q.getCategoryByIDStmt,
		getChildCategoriesStmt:     q.getChildCategoriesStmt,
		getContactInfoStmt:         q.getContactInfoStmt,
		getFilteredPostsStmt:       q.getFilteredPostsStmt,
		getImageByIDStmt:           q.getImageByIDStmt,
		getImageByURLStmt:          q.getImageByURLStmt,
		getParentCategoryIDStmt:    q.getParentCategoryIDStmt,
		getPostByIDStmt:            q.getPostByIDStmt,
		getPostsStmt:               q.getPostsStmt,
		getPostsByCategoryIDStmt:   q.getPostsByCategoryIDStmt,
		getPostsByCategorySlugStmt: q.getPostsByCategorySlugStmt,
		getPostsByStatusStmt:       q.getPostsByStatusStmt,
		getPostsByTagIDStmt:        q.getPostsByTagIDStmt,
		getPostsByTagSlugStmt:      q.getPostsByTagSlugStmt,
		getPostsByUserIDStmt:       q.getPostsByUserIDStmt,
		getSiteAboutStmt:           q.getSiteAboutStmt,
		getSiteInfoStmt:            q.getSiteInfoStmt,
		getSiteMetaStmt:            q.getSiteMetaStmt,
		getTagByIDStmt:             q.getTagByIDStmt,
		getTagsByPostIDStmt:        q.getTagsByPostIDStmt,
		getUncategorizedPostsStmt:  q.getUncategorizedPostsStmt,
		getUserAvatarIDStmt:        q.getUserAvatarIDStmt,
		getUserByEmailOrPhoneStmt:  q.getUserByEmailOrPhoneStmt,
		getUserByIDStmt:            q.getUserByIDStmt,
		updateCategoryStmt:         q.updateCategoryStmt,
		updateCategoryParentStmt:   q.updateCategoryParentStmt,
		updateImageURLStmt:         q.updateImageURLStmt,
		updatePostBodyStmt:         q.updatePostBodyStmt,
		updatePostMetadataStmt:     q.updatePostMetadataStmt,
		updatePostPrivateStmt:      q.updatePostPrivateStmt,
		updatePostStatusStmt:       q.updatePostStatusStmt,
		updateSiteInfoStmt:         q.updateSiteInfoStmt,
		updateTagStmt:              q.updateTagStmt,
		updateUserAvatarStmt:       q.updateUserAvatarStmt,
		updateUserInfoStmt:         q.updateUserInfoStmt,
		updateUserPasswordStmt:     q.updateUserPasswordStmt,
		updateUserRoleStmt:         q.updateUserRoleStmt,
	}
}

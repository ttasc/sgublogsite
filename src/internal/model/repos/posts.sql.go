// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package repos

import (
	"context"
	"database/sql"
)

const addPostToCategory = `-- name: AddPostToCategory :execresult
INSERT INTO post_categories (
    post_id,
    category_id
) VALUES (?, ?)
`

type AddPostToCategoryParams struct {
	PostID     int32 `json:"post_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) AddPostToCategory(ctx context.Context, arg AddPostToCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.addPostToCategoryStmt, addPostToCategory, arg.PostID, arg.CategoryID)
}

const addTagToPost = `-- name: AddTagToPost :execresult
INSERT INTO post_tags (
    post_id,
    tag_id
) VALUES (?, ?)
`

type AddTagToPostParams struct {
	PostID int32 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) AddTagToPost(ctx context.Context, arg AddTagToPostParams) (sql.Result, error) {
	return q.exec(ctx, q.addTagToPostStmt, addTagToPost, arg.PostID, arg.TagID)
}

const createPost = `-- name: CreatePost :execresult

INSERT INTO posts (
    user_id,
    title,
    slug,
    preview_pic_id,
    body
) VALUES (?, ?, ?, ?, ?)
`

type CreatePostParams struct {
	UserID       sql.NullInt32 `json:"user_id"`
	Title        string        `json:"title"`
	Slug         string        `json:"slug"`
	PreviewPicID sql.NullInt32 `json:"preview_pic_id"`
	Body         string        `json:"body"`
}

// WHERE MATCH(title, body)) AGAINST (sqlc.arg(text));
func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.exec(ctx, q.createPostStmt, createPost,
		arg.UserID,
		arg.Title,
		arg.Slug,
		arg.PreviewPicID,
		arg.Body,
	)
}

const deletePost = `-- name: DeletePost :execresult
DELETE FROM posts
WHERE post_id = ?
`

func (q *Queries) DeletePost(ctx context.Context, postID int32) (sql.Result, error) {
	return q.exec(ctx, q.deletePostStmt, deletePost, postID)
}

const findPosts = `-- name: FindPosts :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE lower(concat(title, ' ', body)) LIKE lower(?)
`

func (q *Queries) FindPosts(ctx context.Context, text string) ([]Post, error) {
	rows, err := q.query(ctx, q.findPostsStmt, findPosts, text)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at FROM posts
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.query(ctx, q.getAllPostsStmt, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByCategoryID = `-- name: GetPostsByCategoryID :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE post_id IN (
    SELECT post_id
    FROM post_categories
    WHERE category_id = ?
)
`

func (q *Queries) GetPostsByCategoryID(ctx context.Context, categoryID int32) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsByCategoryIDStmt, getPostsByCategoryID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByCategoryName = `-- name: GetPostsByCategoryName :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE post_id IN (
    SELECT post_id
    FROM post_categories
    WHERE category_id IN (
        SELECT category_id
        FROM categories
        WHERE name = ?
    )
)
`

func (q *Queries) GetPostsByCategoryName(ctx context.Context, name string) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsByCategoryNameStmt, getPostsByCategoryName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByStatus = `-- name: GetPostsByStatus :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE status = ?
`

func (q *Queries) GetPostsByStatus(ctx context.Context, status PostsStatus) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsByStatusStmt, getPostsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByTagID = `-- name: GetPostsByTagID :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE post_id IN (
    SELECT post_id
    FROM post_tags
    WHERE tag_id = ?
)
`

func (q *Queries) GetPostsByTagID(ctx context.Context, tagID int32) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsByTagIDStmt, getPostsByTagID, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByTagName = `-- name: GetPostsByTagName :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE post_id IN (
    SELECT post_id
    FROM post_tags
    WHERE tag_id IN (
        SELECT tag_id
        FROM tags
        WHERE name = ?
    )
)
`

func (q *Queries) GetPostsByTagName(ctx context.Context, name string) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsByTagNameStmt, getPostsByTagName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE user_id = ?
`

func (q *Queries) GetPostsByUserID(ctx context.Context, userID sql.NullInt32) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsByUserIDStmt, getPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUncategorizedPosts = `-- name: GetUncategorizedPosts :many
SELECT post_id, user_id, title, slug, preview_pic_id, body, status, created_at, updated_at
FROM posts
WHERE post_id NOT IN (
    SELECT post_id
    FROM post_categories
)
`

func (q *Queries) GetUncategorizedPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.query(ctx, q.getUncategorizedPostsStmt, getUncategorizedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Title,
			&i.Slug,
			&i.PreviewPicID,
			&i.Body,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostBody = `-- name: UpdatePostBody :execresult
UPDATE posts
SET body = ?
WHERE post_id = ?
`

type UpdatePostBodyParams struct {
	Body   string `json:"body"`
	PostID int32  `json:"post_id"`
}

func (q *Queries) UpdatePostBody(ctx context.Context, arg UpdatePostBodyParams) (sql.Result, error) {
	return q.exec(ctx, q.updatePostBodyStmt, updatePostBody, arg.Body, arg.PostID)
}

const updatePostMetadata = `-- name: UpdatePostMetadata :execresult
UPDATE posts
SET
    title = ?,
    slug = ?,
    preview_pic_id = ?
WHERE post_id = ?
`

type UpdatePostMetadataParams struct {
	Title        string        `json:"title"`
	Slug         string        `json:"slug"`
	PreviewPicID sql.NullInt32 `json:"preview_pic_id"`
	PostID       int32         `json:"post_id"`
}

func (q *Queries) UpdatePostMetadata(ctx context.Context, arg UpdatePostMetadataParams) (sql.Result, error) {
	return q.exec(ctx, q.updatePostMetadataStmt, updatePostMetadata,
		arg.Title,
		arg.Slug,
		arg.PreviewPicID,
		arg.PostID,
	)
}

const updatePostStatus = `-- name: UpdatePostStatus :execresult
UPDATE posts
SET status = ?
WHERE post_id = ?
`

type UpdatePostStatusParams struct {
	Status PostsStatus `json:"status"`
	PostID int32       `json:"post_id"`
}

func (q *Queries) UpdatePostStatus(ctx context.Context, arg UpdatePostStatusParams) (sql.Result, error) {
	return q.exec(ctx, q.updatePostStatusStmt, updatePostStatus, arg.Status, arg.PostID)
}
